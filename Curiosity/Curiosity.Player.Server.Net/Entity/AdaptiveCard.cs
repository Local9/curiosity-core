// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Curiosity.Server.net.Entity;
//
//    var adaptiveCard = AdaptiveCard.FromJson(jsonString);

namespace Curiosity.Server.net.Entity
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System;
    using System.Globalization;

    public partial class AdaptiveCard
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get { return "AdaptiveCard"; } }

        [JsonProperty("$schema", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Schema { get { return new Uri("http://adaptivecards.io/schemas/adaptive-card.json"); } }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get { return "1.0"; } }

        [JsonProperty("body", NullValueHandling = NullValueHandling.Ignore)]
        public Body[] Body { get; set; }
    }

    public partial class Body
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }

        [JsonProperty("egg", NullValueHandling = NullValueHandling.Ignore)]
        public string Egg { get; set; }

        [JsonProperty("fallback", NullValueHandling = NullValueHandling.Ignore)]
        public FallbackUnion? Fallback { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public string Size { get; set; }

        [JsonProperty("weight", NullValueHandling = NullValueHandling.Ignore)]
        public string Weight { get; set; }

        [JsonProperty("someProperty", NullValueHandling = NullValueHandling.Ignore)]
        public string SomeProperty { get; set; }

        [JsonProperty("horizontalAlignment", NullValueHandling = NullValueHandling.Ignore)]
        public string HorizontalAlignment { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public Body[] Items { get; set; }
    }

    public partial class FallbackClass
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }
    }

    public partial struct FallbackUnion
    {
        public FallbackClass FallbackClass;
        public string String;

        public static implicit operator FallbackUnion(FallbackClass FallbackClass) => new FallbackUnion { FallbackClass = FallbackClass };
        public static implicit operator FallbackUnion(string String) => new FallbackUnion { String = String };
    }

    public partial class AdaptiveCard
    {
        public static AdaptiveCard FromJson(string json) => JsonConvert.DeserializeObject<AdaptiveCard>(json, Curiosity.Server.net.Entity.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AdaptiveCard self) => JsonConvert.SerializeObject(self, Curiosity.Server.net.Entity.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                FallbackUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class FallbackUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FallbackUnion) || t == typeof(FallbackUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new FallbackUnion { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<FallbackClass>(reader);
                    return new FallbackUnion { FallbackClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type FallbackUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (FallbackUnion)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.FallbackClass != null)
            {
                serializer.Serialize(writer, value.FallbackClass);
                return;
            }
            throw new Exception("Cannot marshal type FallbackUnion");
        }

        public static readonly FallbackUnionConverter Singleton = new FallbackUnionConverter();
    }
}
